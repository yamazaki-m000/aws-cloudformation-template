Description:
  This template deploys a VPC, with a pair of front, service and backend subnets spread across two Availability Zones.
  It deploys an Internet Gateway, with a default route on the public subnets.

# ------------------------------------------------------------
# Parameters section
# ------------------------------------------------------------
Parameters:
  EnvName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: stg
    AllowedValues:
      - stg
      - prd

  ServiceName:
    Description: Please enter the service name provided to the customer
    Type: String
    Default: equipms

  RevisionNumber:
    Description: The revision number of this template consists of 3 parts.
    Type: String
    Default: 0.1.0

  IpAddressTF:
    Description: Global IP address of Tech Fun.
    Type: String
    Default: 113.32.65.218/32

Mappings:
  Vpc:
    stg:
      VpcCIDR: 10.2.0.0/16
      PublicSubnetCIDR: 10.2.11.0/24
      PrivateSubnetCIDR: 10.2.21.0/24
    prd:
      VpcCIDR: 10.3.0.0/16
      PublicSubnetCIDR: 10.3.11.0/24
      PrivateSubnetCIDR: 10.3.21.0/24

# ------------------------------------------------------------
# Resources section
# ------------------------------------------------------------
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Vpc, !Ref EnvName, VpcCIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-${ServiceName}-vpc
        - Key: Env
          Value: !Ref EnvName
        - Key: Service
          Value: !Ref ServiceName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-${ServiceName}-igw
        - Key: Env
          Value: !Ref EnvName
        - Key: Service
          Value: !Ref ServiceName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # ----------------------------------------
  # Subnets
  # ----------------------------------------
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [Vpc, !Ref EnvName, PublicSubnetCIDR]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-${ServiceName}-public-subnet
        - Key: Env
          Value: !Ref EnvName
        - Key: Service
          Value: !Ref ServiceName

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [Vpc, !Ref EnvName, PrivateSubnetCIDR]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-${ServiceName}-private-subnet
        - Key: Env
          Value: !Ref EnvName
        - Key: Service
          Value: !Ref ServiceName

  # ----------------------------------------
  # RouteTables/Routes
  # ----------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-${ServiceName}-public-route
        - Key: Env
          Value: !Ref EnvName
        - Key: Service
          Value: !Ref ServiceName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # ----------------------------------------
  # Security Groups
  # ----------------------------------------
  SecurityGroupInternal:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${EnvName}-${ServiceName}-internal
      GroupDescription: "Allow all traffic from and to each other within the VPC."
      SecurityGroupIngress:
        - CidrIp: !FindInMap [Vpc, !Ref EnvName, VpcCIDR]
          IpProtocol: "-1"

  SecurityGroupPublicApi:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${EnvName}-${ServiceName}-public-api
      GroupDescription: "Allow HTTP/HTTPS traffic from the Internet to the API."
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"

  SecurityGroupMainteTF:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${EnvName}-${ServiceName}-mainte-tf
      GroupDescription: "Allow all traffic from Tech Fun."
      SecurityGroupIngress:
        - CidrIp: !Ref IpAddressTF
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
        - CidrIp: !Ref IpAddressTF
          IpProtocol: "tcp"
          FromPort: "3389"
          ToPort: "3389"

# ------------------------------------------------------------
# Outputs section
# ------------------------------------------------------------
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvName}-${ServiceName}-vpc

  PublicSubnet:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${EnvName}-${ServiceName}-public-subnet

  PrivateSubnet:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub ${EnvName}-${ServiceName}-private-subnet

  SecurityGroupInternal:
    Description: "Allow all traffic from and to each other within the VPC."
    Value: !Ref SecurityGroupInternal
    Export:
      Name: !Sub ${EnvName}-${ServiceName}-security-group-internal

  SecurityGroupPublicApi:
    Description: "Allow HTTP/HTTPS traffic from the Internet to the API."
    Value: !Ref SecurityGroupPublicApi
    Export:
      Name: !Sub ${EnvName}-${ServiceName}-security-group-public-api

  SecurityGroupMainteTF:
    Description: "Allow all traffic from Tech Fun."
    Value: !Ref SecurityGroupMainteTF
    Export:
      Name: !Sub ${EnvName}-${ServiceName}-security-groupMainte-tf
