Description: Creates an S3 bucket configured for hosting a static website, and a Route53 DNS record pointing to the bucket

# ------------------------------------------------------------
# Parameters section
# ------------------------------------------------------------
Parameters:
  EnvName:
    Description: An environment name that will be prefixed to resource names.
    Type: String
    Default: stg
    AllowedValues:
      - stg
      - prd

  ServiceName:
    Description: Please enter the service name provided to the customer.
    Type: String
    Default: equipms

# ------------------------------------------------------------
# Resources section
# ------------------------------------------------------------
Mappings:
  CloudFront:
    stg:
      DistributionAlias: www.stg.equip-ms.work
    prd:
      DistributionAlias: www.equip-ms.work

  ACM:
    stg:
      certARN: "arn:aws:acm:us-east-1:553548586916:certificate/ac08fe59-2557-4bd0-9680-9df1d3d72754"
    prd:
      certARN: "arn:aws:acm:us-east-1:553548586916:certificate/ac08fe59-2557-4bd0-9680-9df1d3d72754"

  Route53:
    stg:
      HostedZoneId: Z1PVLHWD6QRSKS
    prd:
      HostedZoneId: Z1PVLHWD6QRSKS


# ------------------------------------------------------------
# Resources section
# ------------------------------------------------------------
Resources:

  # S3
  WebsiteHostingS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete 
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub ${EnvName}-${ServiceName}-front
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Delete

  WebsiteHostingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteHostingS3Bucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Join [ "", [ "arn:aws:s3:::",!Ref WebsiteHostingS3Bucket, "/*" ] ]
            Principal: "*"
#              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront
  WebsiteCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to S3 bucket
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        Aliases:
          - !FindInMap [ "CloudFront", !Ref EnvName, "DistributionAlias"]
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !FindInMap [ "ACM", !Ref EnvName, certARN ]
          SslSupportMethod: sni-only
      Tags:
        - Key: Name
          Value: !Sub ${EnvName}-${ServiceName}-vpc
        - Key: Env
          Value: !Ref EnvName
        - Key: Service
          Value: !Ref ServiceName

  # Route53
  WebsiteDNSName:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !FindInMap [Route53, !Ref EnvName, HostedZoneId]
      Name: !FindInMap [ "CloudFront", !Ref EnvName, "DistributionAlias"]
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt WebsiteCloudfrontDistribution.DomainName

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName
